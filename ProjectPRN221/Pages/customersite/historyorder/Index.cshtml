@page
@model ProjectPRN221.Pages.customersite.historyorder.IndexModel
@{
    ViewData["Title"] = "History Order";
    Layout = "CustomerLayout";
}

        <style>
            .orderstatus {
                margin-bottom:  20px;
                display: flex;
                justify-content: space-evenly;
                margin-top:   20px;
            }
        </style>

    <!-- ================================================== -->

    @*HEADER*@
<partial name="/Pages/_HeaderCustomersite.cshtml" model="new ProjectPRN221.Pages._HeaderCustomerSiteModel()" />

            <div class="col-lg-12 col-md-12">
            <div>
                <div style="text-align: center">
                    <h1 class="">Order</h1>
                </div>
                <div style="text-align: center">
                    <a onclick="exportToExcel()" class="btn btn-primary text-white me-0"> Export</a>
                </div>
                <div class="orderstatus">
                    <p><a href="/customersite/historyorder/Index?service=displayOrderStatus&status=Wait">Wait:@Model.Wait</a></p>
                    <p><a href="/customersite/historyorder/Index?service=displayOrderStatus&status=Process">Process:@Model.Process</a></p>
                    <p><a href="/customersite/historyorder/Index?service=displayOrderStatus&status=Done">Done:@Model.Done</a></p>
                    <p><a href="/customersite/historyorder/Index?service=displayOrderStatus&status=Cancel">Cancel:@Model.Cancel</a></p>
                </div>
            </div>
            <div>
                <table style="width: 100%" id="myTable">
                    <thead>
                        <tr>
                            <th>Name Receiver</th>
                            <th>Phone Receiver</th>
                            <th>Address Receiver</th>
                            <th>Total Price</th>
                            <th>Order Date</th>
                            <th>Payment</th>
                            <th>Status</th>
                            <th>Detail</th>
                                @*<c:if test="${status.equalsIgnoreCase('Wait')}">
                                <th>Update Status</th>
                                </c:if>*@
                        </tr>
                    </thead>
                    <tbody>
                    @foreach(var item in Model.Orders)
                    {
                    <tr>
                                <td>@item.NameReceiver</td>
                                <td>@item.PhoneReceiver</td>
                                <td>@item.AddressReceiver</td> 
                                <td class="number">@item.TotalPrice</td> 
                                <td>@item.OderDate</td> 
                                <td>@item.Payment</td> 
                                <td>
                                <div class="@(item.Status.Equals("Wait") ? "badge badge-opacity-info" :
                                              item.Status.Equals("Process") ? "badge badge-opacity-warning" :
                                              item.Status.Equals("Done") ? "badge badge-opacity-success" :
                                              item.Status.Equals("Cancel") ? "badge badge-opacity-danger" :
                                              "default-class")">
                                    @item.Status
                                </div>
                                </td> 
                                <td><div><a href="/customersite/historyorder/Detail?id=@item.OrderId">Detail</a></div></td>  
                                @*<c:if test="${status.equalsIgnoreCase('Wait')}">
                                    <td> 
                                        <div><a href="OrderCustomerController?service=updateStatus&id=${d.order_id}">Cancel</a></div>    
                                    </td>
                                </c:if>*@
                            </tr>  
                    }

                    </tbody>
                </table>
            </div>
            <div style="text-align: center">
                <nav class="navigation paging-navigation text-center padding-medium" role="navigation">
                    <div class="pagination loop-pagination d-flex justify-content-center">
                @if (Model.Orders.PageIndex > 1)
                {
                    <a href="?pageIndex=@(Model.Orders.PageIndex - 1)" class="pagination-arrow d-flex align-items-center">
                        <i class="icon icon-arrow-left"></i>
                    </a>
                }
                else
                {
                    <span class="pagination-arrow d-flex align-items-center">
                        <i class="icon icon-arrow-left"></i>
                    </span>
                }

                @for (int i = 1; i <= Model.Orders.TotalPages; i++)
                {
                    if (i == Model.Orders.PageIndex)
                    {
                        <span aria-current="page" class="page-numbers current">@i</span>
                    }
                    else
                    {
                        <a href="?pageIndex=@i" class="page-numbers">@i</a>
                    }
                }

                @if (Model.Orders.PageIndex < Model.Orders.TotalPages)
                {
                    <a href="?pageIndex=@(Model.Orders.PageIndex + 1)" class="pagination-arrow d-flex align-items-center">
                        <i class="icon icon-arrow-right"></i>
                    </a>
                }
                else
                {
                    <span class="pagination-arrow d-flex align-items-center">
                        <i class="icon icon-arrow-right"></i>
                    </span>
                }
                </div>
                </nav>
            </div>
        </div>


        <script src="https://unpkg.com/xlsx/dist/xlsx.full.min.js"></script>
        <script>
                        function exportToExcel() {
                            const table = document.getElementById("myTable");
                            const wb = XLSX.utils.table_to_book(table, {sheet: "SheetJS"});
                            const wbout = XLSX.write(wb, {bookType: "xlsx", type: "array"});
                            saveAsExcelFile(wbout, "order.xlsx");
                        }

                        function saveAsExcelFile(buffer, fileName) {
                            const data = new Blob([buffer], {type: "application/octet-stream"});
                            const link = document.createElement("a");
                            link.href = window.URL.createObjectURL(data);
                            link.download = fileName;
                            link.click();
                        }
        </script>
